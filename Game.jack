class Game{
   static Game instance;
   field Pad batone;
   field Pad battwo;
   field Ball ball;
   field boolean exit;
   field boolean reset;
   field int score1;
   field int score2;
   field int wall;
   field int batheight;
   field int lastWall;  
constructor Game new(){
  do Screen.clearScreen(); 
let score1=0;
	let score2=0;  
    let batheight=50;
    let batone=Pad.new(2,102,10,batheight);
    let battwo=Pad.new(500,102,10,batheight);
    let ball=Ball.new(100,100,12,500,43,255);
   do ball.setDestination(0,200);
   do Screen.drawRectangle(0,40,511,42);
   do Output.moveCursor(2,13);
    do Output.printInt(score1);    
    do Output.moveCursor(2,51);
    do Output.printInt(score2);
	do Output.moveCursor(2,28);
	do Output.printString("( SCORE )");
		
let exit=false;
let reset=false;
    
	let lastWall = 0;
	let wall=0;
    return this;
  }
  method void dispose() {
        do batone.dispose();  
        do battwo.dispose();        
        do Memory.deAlloc(this);
        return;
    }
 function void newInstance() {
        let instance = Game.new();
        return;
    }
  function Game getInstance() {
        return instance;
    }
method void run(){
  var char key;
  var boolean x;
 var boolean fin;
 var char m;
  while (~reset)
  {
	let lastWall = 0;
	let wall=0;
	let exit=false;
	
  
    while (~exit) {
            // waits for a key to be pressed.
            while (((key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
				do batone.move();
				do battwo.move();
				do moveBall();
                do Sys.wait(50);
            }

            if (key = 87) { do batone.setDirection(1); }
	              else {
                   if(key=83){ do batone.setDirection(2);}			
                         else{    if(key=131){do battwo.setDirection(1);}			
			                    else{
			
	            if (key = 133) { do battwo.setDirection(2); }
		                            else {
                    if (key = 140) { let reset = true; }
		        }}}
            }

            // Waits for the key to be released...
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
				do batone.move();
				do battwo.move();
				do moveBall();
                do Sys.wait(50);
				
            }
        }

	     if(exit)
		 {   if(ball.getLeft() < 200)
		 { let score2=score2 + 1;    }
 		 else
		 {  let score1=score1 + 1;}
		 do ball.hide();
		 do Output.moveCursor(2,13);
             do Output.printInt(score1);    
             do Output.moveCursor(2,51);
             do Output.printInt(score2);
			 do ball.dispose();
			// let batone=Pad.new(2,102,10,batheight);
   // let battwo=Pad.new(500,102,10,batheight);
             let ball=Ball.new(200,100,12,500,43,255);
			 do ball.setDestination(0,200);
		     let x = Win();
			 if(x)
			 {  let reset=true;}
			        
		 }
		  }
		    do Output.moveCursor(10,27);
	        do Output.printString("GAME OVER");
			do Sys.wait(1500);
			if(score1=3)
			{do Output.moveCursor(12,25);
			do Output.printString("PLAYER 1 WINS !");}
			else
			{
			     do Output.moveCursor(12,25);
			do Output.printString("PLAYER 2 WINS !");
			}
			
			let fin=true;
			while(fin)
			{  do Output.moveCursor(20,11);   
			do Output.printString(" Hold  BACKSPACE  to go back to MAIN MENU");
			do Sys.wait(850);
			let m=Keyboard.keyPressed();
			if(m=129)
			{ let fin=false; }
			
			}
		  return;
		 }
		 /**let x = Win();
	    if (exit & x) {
            do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
			
	    }
		else{
		   if((ball.getLeft()) > 400){let score1=score1+1;}
          	if((ball.getLeft()) < 20){let score2=score2+1;}
			 do Output.moveCursor(2,21);
             do Output.printInt(score1);    
             do Output.moveCursor(2,42);
             do Output.printInt(score2);
           do  ball.hide();
		   do  ball.setX(100);
		  do  ball.setY(100);
		  do ball.show();
			do ball.setDestination(0,200);
			let exit=false;	
			let lastWall = 0;
	let wall=0;
			//do Game.new();
            do Sys.wait(50);
						
            }**/
       
    
	method boolean Win()
	{
	   if ((score1=3))
	   {  return true;}
	  else{
if (score2=3)
{return true;}	  
	else
	{ return false;  }
	}}
	method boolean collision(Pad p)
	{ var int batLeft, batRight, ballTop, ballRight,ballLeft,ballBottom,batTop,batBottom;
	  let batLeft=p.getLeft();
	   let batRight=p.getRight();
	   let batTop=p.getTop();
	   let batBottom=p.getBottom();
	   let ballLeft=ball.getLeft();
	   let ballRight=ball.getRight();
	   let ballTop=ball.getTop();
	   let ballBottom=ball.getBottom();
	  if ((ballRight>batLeft) & (ballBottom>batTop) & (ballLeft>batRight) & (ballTop>batBottom))
	{return true;}
	  else{ return false;}
	
	}
method void moveBall() {
        var int bouncingDirection,batoneLeft,batoneRight,battwoLeft,battwoRight,ballLeft,ballRight,bonet,btwot,boneb,btwob,ballBottom,ballTop;

        let wall = ball.move();

        if ((wall > 0) & (~(wall = lastWall))) {
            let lastWall = wall;
            let bouncingDirection = 0;
            let batoneLeft = batone.getLeft();
            let batoneRight = batone.getRight();
            let battwoLeft = battwo.getLeft();
            let battwoRight = battwo.getRight();
			let ballLeft = ball.getLeft();
            let ballRight = ball.getRight();
			let bonet=batone.getTop();
			let btwot=battwo.getTop();
			let boneb=batone.getBottom();
			let btwob=battwo.getBottom();
			let ballBottom=ball.getBottom();
			let ballTop=ball.getTop();
  
            if (wall = 1) {
               // let exit = ((bonet > ballBottom) | (boneb < ballTop) | (btwot > ballBottom) |(btwob < ballTop));
                //let exit = ((batoneLeft+(batone.getWidth)) > ballRight) | ((batoneRight+(batone.getWidth)) > ballLeft)|(battwoLeft > ballRight) | (battwoRight > ballLeft));
				 let exit=((ballBottom < bonet) | (ballTop > boneb));
				if (~exit) {
                    if (ballBottom > (bonet + 10)) { let bouncingDirection = -1; }
                    else {
                        if (ballTop < (boneb - 10)) { let bouncingDirection = 1; }
                    }

                         
                    
                }}
				if(wall=2){
				let exit=((ballTop>btwob) |(ballBottom<btwot));
				if (~exit)
				{
				if (ballBottom > (btwot + 10)) { let bouncingDirection = -1; }
                    else {
                        if (ballTop > (btwob - 10)) { let bouncingDirection = 1; }
                    }
				
				
				}
				}
				
            
			
			//let batheight = batheight - 2;
                //    do batone.setWidth(batheight); 
                //    do battwo.setWidth(batheight); 
                  	do ball.bounce(bouncingDirection);
        }
        return;
    }
}
